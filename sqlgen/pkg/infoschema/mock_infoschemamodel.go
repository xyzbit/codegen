// Code generated by MockGen. DO NOT EDIT.
// Source: infoschemamodel.go

// Package infoschema is a generated GoMock package.
package infoschema

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIInformationSchema is a mock of IInformationSchema interface.
type MockIInformationSchema struct {
	ctrl     *gomock.Controller
	recorder *MockIInformationSchemaMockRecorder
}

// MockIInformationSchemaMockRecorder is the mock recorder for MockIInformationSchema.
type MockIInformationSchemaMockRecorder struct {
	mock *MockIInformationSchema
}

// NewMockIInformationSchema creates a new mock instance.
func NewMockIInformationSchema(ctrl *gomock.Controller) *MockIInformationSchema {
	mock := &MockIInformationSchema{ctrl: ctrl}
	mock.recorder = &MockIInformationSchemaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInformationSchema) EXPECT() *MockIInformationSchemaMockRecorder {
	return m.recorder
}

// FindColumns mocks base method.
func (m *MockIInformationSchema) FindColumns(db, table string) (*Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindColumns", db, table)
	ret0, _ := ret[0].(*Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindColumns indicates an expected call of FindColumns.
func (mr *MockIInformationSchemaMockRecorder) FindColumns(db, table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindColumns", reflect.TypeOf((*MockIInformationSchema)(nil).FindColumns), db, table)
}

// FindIndex mocks base method.
func (m *MockIInformationSchema) FindIndex(db, table, column string) ([]*DbIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIndex", db, table, column)
	ret0, _ := ret[0].([]*DbIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIndex indicates an expected call of FindIndex.
func (mr *MockIInformationSchemaMockRecorder) FindIndex(db, table, column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIndex", reflect.TypeOf((*MockIInformationSchema)(nil).FindIndex), db, table, column)
}

// GetAllTables mocks base method.
func (m *MockIInformationSchema) GetAllTables(database string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTables", database)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTables indicates an expected call of GetAllTables.
func (mr *MockIInformationSchemaMockRecorder) GetAllTables(database interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTables", reflect.TypeOf((*MockIInformationSchema)(nil).GetAllTables), database)
}
